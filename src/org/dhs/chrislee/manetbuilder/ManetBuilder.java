/*
 * ManetBuilder.java
 *
 * Created on August 13, 2004, 11:29 PM
 */
package org.dhs.chrislee.manetbuilder;

import java.awt.*;
import javax.swing.*;
import java.awt.geom.*;
import org.dhs.chrislee.manetbuilder.fileformat.FileFormat;

/**
 *
 * @author  chris
 */
public class ManetBuilder extends javax.swing.JFrame {
    private org.dhs.chrislee.manetbuilder.MapPanel mapPanel1;
    
    static final int RANGES_ROW = 0;
    static final int LINKS_ROW = 1;
    static final int COORDS_ROW = 2;
    static final int LENGTHS_ROW = 3;
    static final int GRID_ROW = 4;
    static final int SNAP_ROW = 5;
    static final int BACKGROUND_ROW = 6;
    
    // Editor variables
    static java.util.Properties props;
    String filename;
    FileFormat currentFileFormat;
    boolean current = true;
    
    // Map variables
    double zoom = 1.0;
    
    // Node variables
    int new_nodeId = 1;
    int currentNodeId = 0;
    int msgId = 0;
    double last_x = 0, last_y = 0;
    double currentRange = 100;

    // Interaction variables
    Node draggedNode;
    javax.swing.Timer timer;
    int propertiesRow = 0;
    long millis = System.currentTimeMillis();
    
    /** Creates new form ManetBuilder */
    public ManetBuilder() {
        initComponents();
        mapPanel1 = new org.dhs.chrislee.manetbuilder.MapPanel( 1000, 1000, 600 );
        addMapEvents();
        jScrollPaneMap.setViewportView( mapPanel1 );
        jSplitPaneMain.setDividerLocation( this.getWidth() - 200 );
        jTableProps.setModel( new ManetBuilderOptionTable() );
        ManetBuilderPluginFinder.initPlugins();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        buttonGroupMode = new javax.swing.ButtonGroup();
        jPanelMain = new javax.swing.JPanel();
        jSplitPaneMain = new javax.swing.JSplitPane();
        jScrollPaneMap = new javax.swing.JScrollPane();
        jPanelSidePanel = new javax.swing.JPanel();
        jPanelProps = new javax.swing.JPanel();
        jTableProps = new javax.swing.JTable();
        jPanelOptions = new javax.swing.JPanel();
        jTableOptions = new javax.swing.JTable();
        jPanelTime = new javax.swing.JPanel();
        jSliderTime = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemNew = new javax.swing.JMenuItem();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemSaveAs = new javax.swing.JMenuItem();
        jMenuItemSaveCopy = new javax.swing.JMenuItem();
        jMenuItemPrint = new javax.swing.JMenuItem();
        jMenuItemClose = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemUndo = new javax.swing.JMenuItem();
        jMenuItemRedo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItemCut = new javax.swing.JMenuItem();
        jMenuItemCopy = new javax.swing.JMenuItem();
        jMenuItemPaste = new javax.swing.JMenuItem();
        jMenuItemDelete = new javax.swing.JMenuItem();
        jMenuItemProperties = new javax.swing.JMenuItem();
        jMenuView = new javax.swing.JMenu();
        jMenuItemZoomIn = new javax.swing.JMenuItem();
        jMenuItemZoomOut = new javax.swing.JMenuItem();
        jMenuItemZoom1 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jCheckBoxMenuItemAllRanges = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemLinks = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemCoords = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemLengths = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemGrid = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemSnap = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemBackground = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuItemAnimate = new javax.swing.JMenuItem();
        jMenuMode = new javax.swing.JMenu();
        jRadioButtonMenuItemLayoutMode = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItemMobilityMode = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItemApplicationMode = new javax.swing.JRadioButtonMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemJoke = new javax.swing.JMenuItem();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setTitle("ManetBuilder");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanelMain.setLayout(new java.awt.BorderLayout());

        jPanelMain.setPreferredSize(new java.awt.Dimension(800, 550));
        jSplitPaneMain.setDividerLocation(500);
        jSplitPaneMain.setPreferredSize(new java.awt.Dimension(800, 500));
        jScrollPaneMap.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPaneMap.setPreferredSize(new java.awt.Dimension(800, 600));
        jScrollPaneMap.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jScrollPaneMapComponentResized(evt);
            }
        });

        jSplitPaneMain.setLeftComponent(jScrollPaneMap);

        jPanelSidePanel.setLayout(new javax.swing.BoxLayout(jPanelSidePanel, javax.swing.BoxLayout.Y_AXIS));

        jPanelProps.setLayout(new java.awt.BorderLayout());

        jPanelProps.setBorder(new javax.swing.border.TitledBorder("Node Properties"));
        jPanelProps.setMinimumSize(new java.awt.Dimension(162, 152));
        jPanelProps.setPreferredSize(new java.awt.Dimension(162, 152));
        jTableProps.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Node Id", "0"},
                {"Location (x.y)", "0,0"},
                {"Mobility", "None"},
                {"Phy Layer", "Basic (100m)"},
                {"Power Model", "None"},
                {"MAC Layer", "802.11"},
                {"Routing Layer", "AODV"},
                {"Transport Layer", "TCP/Sack"},
                {"App Layer", "None"}
            },
            new String [] {
                "Property", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProps.setMinimumSize(new java.awt.Dimension(150, 128));
        jTableProps.setNextFocusableComponent(jScrollPaneMap);
        jTableProps.setSurrendersFocusOnKeystroke(true);
        jTableProps.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePropsMouseClicked(evt);
            }
        });

        jPanelProps.add(jTableProps, java.awt.BorderLayout.CENTER);

        jPanelSidePanel.add(jPanelProps);

        jPanelOptions.setLayout(new java.awt.BorderLayout());

        jPanelOptions.setBorder(new javax.swing.border.TitledBorder(null, "Viewing Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        jPanelOptions.setMinimumSize(new java.awt.Dimension(42, 104));
        jPanelOptions.setPreferredSize(new java.awt.Dimension(162, 104));
        jTableOptions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"ranges", new Boolean(true)},
                {"links", new Boolean(true)},
                {"coords", new Boolean(true)},
                {"lengths", new Boolean(true)},
                {"grid", new Boolean(true)},
                {"snap", new Boolean(true)},
                {"background", new Boolean(true)}
            },
            new String [] {
                "Option", "Display"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableOptions.setNextFocusableComponent(jScrollPaneMap);
        jTableOptions.setSurrendersFocusOnKeystroke(true);
        jTableOptions.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableOptionsPropertyChange(evt);
            }
        });

        jPanelOptions.add(jTableOptions, java.awt.BorderLayout.CENTER);

        jPanelSidePanel.add(jPanelOptions);

        jSplitPaneMain.setRightComponent(jPanelSidePanel);

        jPanelMain.add(jSplitPaneMain, java.awt.BorderLayout.CENTER);

        jPanelTime.setLayout(new java.awt.BorderLayout());

        jSliderTime.setFont(new java.awt.Font("Lucida Grande", 0, 8));
        jSliderTime.setMajorTickSpacing(60);
        jSliderTime.setMaximum(600);
        jSliderTime.setMinorTickSpacing(10);
        jSliderTime.setPaintLabels(true);
        jSliderTime.setPaintTicks(true);
        jSliderTime.setToolTipText("Use in mobility mode to specify which time to view.");
        jSliderTime.setValue(0);
        jSliderTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderTimeStateChanged(evt);
            }
        });

        jPanelTime.add(jSliderTime, java.awt.BorderLayout.SOUTH);

        jPanelMain.add(jPanelTime, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanelMain, java.awt.BorderLayout.NORTH);

        jMenuFile.setMnemonic('f');
        jMenuFile.setText("File");
        jMenuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemNew.setMnemonic('n');
        jMenuItemNew.setText("New...");
        jMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemNew);

        jMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpen.setMnemonic('o');
        jMenuItemOpen.setText("Open");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemOpen);

        jMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSave.setMnemonic('s');
        jMenuItemSave.setText("Save");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemSave);

        jMenuItemSaveAs.setMnemonic('a');
        jMenuItemSaveAs.setText("Save as...");
        jMenuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveAsActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemSaveAs);

        jMenuItemSaveCopy.setText("Save copy");
        jMenuItemSaveCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveCopyActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemSaveCopy);

        jMenuItemPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemPrint.setMnemonic('p');
        jMenuItemPrint.setText("Print...");
        jMenuItemPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemPrint);

        jMenuItemClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemClose.setMnemonic('c');
        jMenuItemClose.setText("Close");
        jMenuFile.add(jMenuItemClose);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemExit.setMnemonic('x');
        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemExit);

        jMenuBar1.add(jMenuFile);

        jMenuEdit.setMnemonic('e');
        jMenuEdit.setText("Edit");
        jMenuItemUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemUndo.setMnemonic('u');
        jMenuItemUndo.setText("Undo");
        jMenuItemUndo.setEnabled(false);
        jMenuEdit.add(jMenuItemUndo);

        jMenuItemRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemRedo.setMnemonic('r');
        jMenuItemRedo.setText("Redo");
        jMenuItemRedo.setEnabled(false);
        jMenuEdit.add(jMenuItemRedo);

        jMenuEdit.add(jSeparator1);

        jMenuItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemCut.setMnemonic('t');
        jMenuItemCut.setText("Cut");
        jMenuItemCut.setEnabled(false);
        jMenuEdit.add(jMenuItemCut);

        jMenuItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemCopy.setMnemonic('c');
        jMenuItemCopy.setText("Copy");
        jMenuItemCopy.setEnabled(false);
        jMenuEdit.add(jMenuItemCopy);

        jMenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemPaste.setText("Paste");
        jMenuItemPaste.setEnabled(false);
        jMenuEdit.add(jMenuItemPaste);

        jMenuItemDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jMenuItemDelete.setMnemonic('d');
        jMenuItemDelete.setText("Delete");
        jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteActionPerformed(evt);
            }
        });

        jMenuEdit.add(jMenuItemDelete);

        jMenuItemProperties.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemProperties.setText("Properties...");
        jMenuItemProperties.setEnabled(false);
        jMenuEdit.add(jMenuItemProperties);

        jMenuBar1.add(jMenuEdit);

        jMenuView.setMnemonic('v');
        jMenuView.setText("View");
        jMenuItemZoomIn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, 0));
        jMenuItemZoomIn.setMnemonic('z');
        jMenuItemZoomIn.setText("Zoom In");
        jMenuItemZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZoomInActionPerformed(evt);
            }
        });

        jMenuView.add(jMenuItemZoomIn);

        jMenuItemZoomOut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, 0));
        jMenuItemZoomOut.setMnemonic('o');
        jMenuItemZoomOut.setText("Zoom Out");
        jMenuItemZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZoomOutActionPerformed(evt);
            }
        });

        jMenuView.add(jMenuItemZoomOut);

        jMenuItemZoom1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemZoom1.setMnemonic('1');
        jMenuItemZoom1.setText("Zoom = 1");
        jMenuItemZoom1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZoom1ActionPerformed(evt);
            }
        });

        jMenuView.add(jMenuItemZoom1);

        jMenuView.add(jSeparator2);

        jCheckBoxMenuItemAllRanges.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItemAllRanges.setMnemonic('a');
        jCheckBoxMenuItemAllRanges.setSelected(true);
        jCheckBoxMenuItemAllRanges.setText("All Ranges");
        jCheckBoxMenuItemAllRanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemAllRangesActionPerformed(evt);
            }
        });

        jMenuView.add(jCheckBoxMenuItemAllRanges);

        jCheckBoxMenuItemLinks.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItemLinks.setMnemonic('l');
        jCheckBoxMenuItemLinks.setSelected(true);
        jCheckBoxMenuItemLinks.setText("Links");
        jCheckBoxMenuItemLinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemLinksActionPerformed(evt);
            }
        });

        jMenuView.add(jCheckBoxMenuItemLinks);

        jCheckBoxMenuItemCoords.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItemCoords.setMnemonic('c');
        jCheckBoxMenuItemCoords.setSelected(true);
        jCheckBoxMenuItemCoords.setText("Coordinates");
        jCheckBoxMenuItemCoords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemCoordsActionPerformed(evt);
            }
        });

        jMenuView.add(jCheckBoxMenuItemCoords);

        jCheckBoxMenuItemLengths.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_8, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItemLengths.setMnemonic('e');
        jCheckBoxMenuItemLengths.setSelected(true);
        jCheckBoxMenuItemLengths.setText("Lengths");
        jCheckBoxMenuItemLengths.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemLengthsActionPerformed(evt);
            }
        });

        jMenuView.add(jCheckBoxMenuItemLengths);

        jCheckBoxMenuItemGrid.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_9, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItemGrid.setMnemonic('g');
        jCheckBoxMenuItemGrid.setSelected(true);
        jCheckBoxMenuItemGrid.setText("Grid");
        jCheckBoxMenuItemGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemGridActionPerformed(evt);
            }
        });

        jMenuView.add(jCheckBoxMenuItemGrid);

        jCheckBoxMenuItemSnap.setMnemonic('s');
        jCheckBoxMenuItemSnap.setSelected(true);
        jCheckBoxMenuItemSnap.setText("Snap");
        jCheckBoxMenuItemSnap.setToolTipText("Click this to snap to the grid.");
        jCheckBoxMenuItemSnap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemSnapActionPerformed(evt);
            }
        });

        jMenuView.add(jCheckBoxMenuItemSnap);

        jCheckBoxMenuItemBackground.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItemBackground.setMnemonic('b');
        jCheckBoxMenuItemBackground.setSelected(true);
        jCheckBoxMenuItemBackground.setText("Background");
        jCheckBoxMenuItemBackground.setEnabled(false);
        jCheckBoxMenuItemBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemBackgroundActionPerformed(evt);
            }
        });

        jMenuView.add(jCheckBoxMenuItemBackground);

        jMenuView.add(jSeparator3);

        jMenuItemAnimate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemAnimate.setMnemonic('n');
        jMenuItemAnimate.setText("Animate");
        jMenuItemAnimate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAnimateActionPerformed(evt);
            }
        });

        jMenuView.add(jMenuItemAnimate);

        jMenuBar1.add(jMenuView);

        jMenuMode.setMnemonic('m');
        jMenuMode.setText("Mode");
        jRadioButtonMenuItemLayoutMode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        buttonGroupMode.add(jRadioButtonMenuItemLayoutMode);
        jRadioButtonMenuItemLayoutMode.setSelected(true);
        jRadioButtonMenuItemLayoutMode.setText("Placement Mode");
        jRadioButtonMenuItemLayoutMode.setToolTipText("Layout nodes on the map.");
        jRadioButtonMenuItemLayoutMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemLayoutModeActionPerformed(evt);
            }
        });

        jMenuMode.add(jRadioButtonMenuItemLayoutMode);

        jRadioButtonMenuItemMobilityMode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        buttonGroupMode.add(jRadioButtonMenuItemMobilityMode);
        jRadioButtonMenuItemMobilityMode.setText("Mobility Mode");
        jRadioButtonMenuItemMobilityMode.setToolTipText("Create mobility profiles for nodes.");
        jRadioButtonMenuItemMobilityMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemMobilityModeActionPerformed(evt);
            }
        });

        jMenuMode.add(jRadioButtonMenuItemMobilityMode);

        jRadioButtonMenuItemApplicationMode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.CTRL_MASK));
        buttonGroupMode.add(jRadioButtonMenuItemApplicationMode);
        jRadioButtonMenuItemApplicationMode.setText("Application Mode");
        jRadioButtonMenuItemApplicationMode.setToolTipText("Associate application with node(s).");
        jRadioButtonMenuItemApplicationMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemApplicationModeActionPerformed(evt);
            }
        });

        jMenuMode.add(jRadioButtonMenuItemApplicationMode);

        jMenuBar1.add(jMenuMode);

        jMenuHelp.setMnemonic('h');
        jMenuHelp.setText("Help");
        jMenuItemJoke.setText("You must be joking");
        jMenuItemJoke.setEnabled(false);
        jMenuHelp.add(jMenuItemJoke);

        jMenuItemAbout.setMnemonic('a');
        jMenuItemAbout.setText("About");
        jMenuHelp.add(jMenuItemAbout);

        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        pack();
    }//GEN-END:initComponents

    private void jCheckBoxMenuItemSnapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemSnapActionPerformed
        jTableOptions.setValueAt( new Boolean( jCheckBoxMenuItemSnap.getState() ), SNAP_ROW, 1 );
    }//GEN-LAST:event_jCheckBoxMenuItemSnapActionPerformed

    private void jTablePropsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePropsMouseClicked
        if ( currentNodeId == 0 )
            return;
        Node mynode = mapPanel1.getNode( currentNodeId );
        java.util.ArrayList allnodes = mapPanel1.getNodes();
        if ( System.currentTimeMillis() - millis < 500 && jTableProps.getSelectedRow() == propertiesRow ) {
            //System.out.println( "jTablePropsMouseDoubleClicked: "+jTableProps.getSelectedRow() );
            switch ( jTableProps.getSelectedRow() ) {
                case ( ManetBuilderOptionTable.NODE_LOCATION_ROW ):
                    NodePropertyDialogs.showLocationDialog( this, mynode );
                    break;
                case ( ManetBuilderOptionTable.NODE_MOBILITY_ROW ):
                    NodePropertyDialogs.showMobilityDialog( this, mynode );
                    break;
                case ( ManetBuilderOptionTable.NODE_PHY_ROW ):
                    NodePropertyDialogs.showPhysicalDialog( this, mynode );
                    break;
                case ( ManetBuilderOptionTable.NODE_POWER_ROW ):
                    NodePropertyDialogs.showPowerDialog( this, mynode );
                    break;
                case ( ManetBuilderOptionTable.NODE_MAC_ROW ):
                    NodePropertyDialogs.showMacDialog( this, mynode );
                    break;
                case ( ManetBuilderOptionTable.NODE_ROUTING_ROW ):
                    NodePropertyDialogs.showRoutingDialog( this, mynode );
                    break;
                case ( ManetBuilderOptionTable.NODE_TRANSPORT_ROW ):
                    NodePropertyDialogs.showTransportDialog( this, mynode );
                    break;
                case ( ManetBuilderOptionTable.NODE_APP_ROW ):
                    new ApplicationMenu( this, true, mynode, allnodes ).setVisible( true );
                    //NodePropertyDialogs.showApplicationDialog( this, mynode, allnodes );
                    break;
            }
            displayNodeProperties( mynode );
            redrawMap();
        }
        propertiesRow = jTableProps.getSelectedRow();
        millis = System.currentTimeMillis();
    }//GEN-LAST:event_jTablePropsMouseClicked

    private void jMenuItemAnimateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAnimateActionPerformed
        timer = new javax.swing.Timer( 10, new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                double newtime = mapPanel1.getTime() + (jSliderTime.getMaximum()/40);
                mapPanel1.setTime( mapPanel1.getTime() + (jSliderTime.getMaximum()/40) );
                if ( newtime > jSliderTime.getMaximum() )
                    newtime = jSliderTime.getMaximum();
                jSliderTime.setValueIsAdjusting( true );
                jSliderTime.setValue( (int)newtime );
                redrawMap();
                //System.out.println("timer: "+mapPanel1.getTime() );
                if ( mapPanel1.getTime() == jSliderTime.getMaximum() ) {
                    timer.stop();
                }
                jSliderTime.setValueIsAdjusting( false );
            }
        });
        timer.setRepeats( true );
        timer.start();
    }//GEN-LAST:event_jMenuItemAnimateActionPerformed

    private void jCheckBoxMenuItemAllRangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemAllRangesActionPerformed
        jTableOptions.setValueAt( new Boolean( jCheckBoxMenuItemAllRanges.getState() ), RANGES_ROW, 1 );
        redrawMap();
    }//GEN-LAST:event_jCheckBoxMenuItemAllRangesActionPerformed

    private void jCheckBoxMenuItemLinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemLinksActionPerformed
        jTableOptions.setValueAt( new Boolean( jCheckBoxMenuItemLinks.getState() ), LINKS_ROW, 1 );
        redrawMap();
    }//GEN-LAST:event_jCheckBoxMenuItemLinksActionPerformed

    private void jCheckBoxMenuItemCoordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemCoordsActionPerformed
        jTableOptions.setValueAt( new Boolean( jCheckBoxMenuItemCoords.getState() ), COORDS_ROW, 1 );
        redrawMap();
    }//GEN-LAST:event_jCheckBoxMenuItemCoordsActionPerformed

    private void jCheckBoxMenuItemLengthsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemLengthsActionPerformed
        jTableOptions.setValueAt( new Boolean( jCheckBoxMenuItemLengths.getState() ), LENGTHS_ROW, 1 );
        redrawMap();
    }//GEN-LAST:event_jCheckBoxMenuItemLengthsActionPerformed

    private void jCheckBoxMenuItemGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemGridActionPerformed
        jTableOptions.setValueAt( new Boolean( jCheckBoxMenuItemGrid.getState() ), GRID_ROW, 1 );
        redrawMap();
    }//GEN-LAST:event_jCheckBoxMenuItemGridActionPerformed

    private void jCheckBoxMenuItemBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemBackgroundActionPerformed
        jTableOptions.setValueAt( new Boolean( jCheckBoxMenuItemBackground.getState() ), BACKGROUND_ROW, 1 );
        redrawMap();
    }//GEN-LAST:event_jCheckBoxMenuItemBackgroundActionPerformed

    private void jTableOptionsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableOptionsPropertyChange
        switch ( jTableOptions.getEditingRow() ) {
            case ( RANGES_ROW ): jCheckBoxMenuItemAllRanges.setState( ! jCheckBoxMenuItemAllRanges.getState() );
                break;
            case ( LINKS_ROW ): jCheckBoxMenuItemLinks.setState( ! jCheckBoxMenuItemLinks.getState() );
                break;
            case ( COORDS_ROW ): jCheckBoxMenuItemCoords.setState( ! jCheckBoxMenuItemCoords.getState() );
                break;
            case ( GRID_ROW ): jCheckBoxMenuItemGrid.setState( ! jCheckBoxMenuItemGrid.getState() );
                break;
            case ( SNAP_ROW ): jCheckBoxMenuItemSnap.setState( ! jCheckBoxMenuItemSnap.getState() );
                break;
            case ( BACKGROUND_ROW ): jCheckBoxMenuItemBackground.setState( ! jCheckBoxMenuItemBackground.getState() );
                break;
        }
        redrawMap();
    }//GEN-LAST:event_jTableOptionsPropertyChange

    private void jRadioButtonMenuItemApplicationModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemApplicationModeActionPerformed
        mapPanel1.setMode( MapPanel.MODE_APPLICATION );
    }//GEN-LAST:event_jRadioButtonMenuItemApplicationModeActionPerformed

    private void jRadioButtonMenuItemLayoutModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemLayoutModeActionPerformed
        mapPanel1.setMode( MapPanel.MODE_LAYOUT );
    }//GEN-LAST:event_jRadioButtonMenuItemLayoutModeActionPerformed

    private void jSliderTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderTimeStateChanged
        mapPanel1.setTime( jSliderTime.getValue() );
        mapPanel1.repaint();
    }//GEN-LAST:event_jSliderTimeStateChanged

    private void jRadioButtonMenuItemMobilityModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemMobilityModeActionPerformed
        mapPanel1.setMode( MapPanel.MODE_MOBILITY );
        jSliderTime.setEnabled( true );
    }//GEN-LAST:event_jRadioButtonMenuItemMobilityModeActionPerformed

    private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteActionPerformed
        if ( currentNodeId != -1 )
            mapPanel1.deleteNode( currentNodeId );
    }//GEN-LAST:event_jMenuItemDeleteActionPerformed

    private void mapPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanel1MouseReleased
        MapMouseReleased( evt );
    }//GEN-LAST:event_mapPanel1MouseReleased

    private void mapPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanel1MouseDragged
        MapMouseDragged( evt );
    }//GEN-LAST:event_mapPanel1MouseDragged

    private void jMenuItemPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintActionPerformed
        mapPanel1.print();
    }//GEN-LAST:event_jMenuItemPrintActionPerformed

    private void jMenuItemSaveCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveCopyActionPerformed
        String myFilename = filename;
        boolean myCurrent = current;
        filename = null;
        saveFile();
        filename = myFilename;
        current = myCurrent;
    }//GEN-LAST:event_jMenuItemSaveCopyActionPerformed

    private void mapPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanel1MouseMoved
        MapMouseMoved( evt );
    }//GEN-LAST:event_mapPanel1MouseMoved

    private void mapPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanel1MouseClicked
        MapMouseClicked( evt );
    }//GEN-LAST:event_mapPanel1MouseClicked

    private void mapPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanel1MousePressed
        MapMousePressed( evt );
    }//GEN-LAST:event_mapPanel1MousePressed

    private void jScrollPaneMapComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jScrollPaneMapComponentResized
        redrawMap();
    }//GEN-LAST:event_jScrollPaneMapComponentResized

    private void MapMouseMoved(java.awt.event.MouseEvent evt) {
        mapPanel1.setMouseLocation( evt.getX()*zoom, evt.getY()*zoom );
    }
    
    private void MapMouseClicked(java.awt.event.MouseEvent evt) {
        if ( timer != null && timer.isRunning() ) {
            timer.stop();
            return;
        }
        
        if ( mapPanel1.isPointNearNode( evt.getX()*zoom, evt.getY()*zoom, jSliderTime.getValue() ) ) {
            Node node = mapPanel1.getNodeNearestPoint( evt.getX()*zoom, evt.getY()*zoom, jSliderTime.getValue() );
            displayNodeProperties( node );
            mapPanel1.selectNode( node.nodeId );
            return;
        }
        
        current = false;
        mapPanel1.setDisplayLinks( jCheckBoxMenuItemLinks.getState() );
        mapPanel1.setDisplayRanges( jCheckBoxMenuItemAllRanges.getState() );
        if ( mapPanel1.getMode() == MapPanel.MODE_LAYOUT ) {
            Node node = new Node( new_nodeId, evt.getX()*zoom, evt.getY()*zoom, currentRange );
            mapPanel1.addNode( node );
            new_nodeId++;
            displayNodeProperties( node );
        } else if ( mapPanel1.getMode() == MapPanel.MODE_MOBILITY ) {
            //System.out.println("Adding Timed Point");
            if ( jSliderTime.getValue() != 0 )
                mapPanel1.addTimedPoint( evt.getX()*zoom, evt.getY()*zoom, jSliderTime.getValue() );
        }
        last_x = evt.getX()*zoom;
        last_y = evt.getY()*zoom;
        
    }
    
    private void MapMousePressed(java.awt.event.MouseEvent evt) {
        if ( mapPanel1.isPointNearNode( evt.getX()*zoom, evt.getY()*zoom, jSliderTime.getValue() ) )
            draggedNode = mapPanel1.getNodeNearestPoint( evt.getX()*zoom, evt.getY()*zoom, jSliderTime.getValue() );
    }

    private void MapMouseDragged(java.awt.event.MouseEvent evt) {
        if ( draggedNode == null )
            return;
        if ( jSliderTime.getValue() == 0 ) {
            if ( jCheckBoxMenuItemSnap.getState() ) {
                Point2D.Double p = snapToGrid( evt.getX(), evt.getY(), zoom );
                draggedNode.x = p.getX();
                draggedNode.y = p.getY();
            } else {
                draggedNode.x = evt.getX()*zoom;
                draggedNode.y = evt.getY()*zoom;
            }
        } else {
            if ( draggedNode.mobility != null && draggedNode.mobility.isPlottable() )
                draggedNode.mobility.addTimedPoint( evt.getX()*zoom, evt.getY()*zoom, jSliderTime.getValue() );
        }
        displayNodeProperties( draggedNode );
        current = false;
        redrawMap();
    }
    
    private void MapMouseReleased(java.awt.event.MouseEvent evt) {
        draggedNode = null;
    }

    private void displayNodeProperties( Node node ) {
        currentNodeId = node.nodeId;
        jTableProps.setValueAt( new Integer( node.nodeId ).toString(), 0, 1 );
        jTableProps.setValueAt( node.x+","+node.y, ManetBuilderOptionTable.NODE_LOCATION_ROW, 1 );
        if ( node.mobility == null ) 
            jTableProps.setValueAt( "None", ManetBuilderOptionTable.NODE_MOBILITY_ROW, 1 ); 
        else 
            jTableProps.setValueAt( node.mobility.getName(), ManetBuilderOptionTable.NODE_MOBILITY_ROW, 1 );
        if ( node.phy == null ) 
            jTableProps.setValueAt( "None", ManetBuilderOptionTable.NODE_PHY_ROW, 1 ); 
        else 
            jTableProps.setValueAt( node.phy.getName(), ManetBuilderOptionTable.NODE_PHY_ROW, 1 );
        if ( node.power == null ) 
            jTableProps.setValueAt( "None", ManetBuilderOptionTable.NODE_POWER_ROW, 1 ); 
        else 
            jTableProps.setValueAt( node.power.getName(), ManetBuilderOptionTable.NODE_POWER_ROW, 1 );
        if ( node.mac == null ) 
            jTableProps.setValueAt( "None", ManetBuilderOptionTable.NODE_MAC_ROW, 1 ); 
        else 
            jTableProps.setValueAt( node.mac.getName(), ManetBuilderOptionTable.NODE_MAC_ROW, 1 );
        if ( node.routing == null ) 
            jTableProps.setValueAt( "None", ManetBuilderOptionTable.NODE_ROUTING_ROW, 1 ); 
        else 
            jTableProps.setValueAt( node.routing.getName(), ManetBuilderOptionTable.NODE_ROUTING_ROW, 1 );
        if ( node.transport == null ) 
            jTableProps.setValueAt( "None", ManetBuilderOptionTable.NODE_TRANSPORT_ROW, 1 ); 
        else 
            jTableProps.setValueAt( node.transport.getName(), ManetBuilderOptionTable.NODE_TRANSPORT_ROW, 1 );
        if ( node.app == null ) 
            jTableProps.setValueAt( "None", ManetBuilderOptionTable.NODE_APP_ROW, 1 ); 
        else 
            if ( node.app.size() == 1 )
                jTableProps.setValueAt( ((org.dhs.chrislee.manetbuilder.application.Application)node.app.get(0)).getName(), ManetBuilderOptionTable.NODE_APP_ROW, 1 );
            else
                jTableProps.setValueAt( "Multiple", ManetBuilderOptionTable.NODE_APP_ROW, 1 );
    }
    
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        jPanelMain.setSize( this.getWidth(), this.getHeight() - jMenuBar1.getHeight() - 20 );
        jSplitPaneMain.setSize( jPanelMain.getWidth(), jPanelMain.getHeight() - jSliderTime.getHeight() - 20 );
        jPanelMain.validate();
        jSplitPaneMain.setDividerLocation( this.getWidth() - 200 );
    }//GEN-LAST:event_formComponentResized

    private void jMenuItemZoom1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZoom1ActionPerformed
        zoom = 1.0;
        redrawMap();
    }//GEN-LAST:event_jMenuItemZoom1ActionPerformed

    private void jMenuItemZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZoomOutActionPerformed
        if ( zoom < 8 )
            zoom *= 2.0;
        redrawMap();
    }//GEN-LAST:event_jMenuItemZoomOutActionPerformed

    private void jMenuItemZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZoomInActionPerformed
        if ( zoom > (1/16) )
            zoom /= 2.0;
        redrawMap();
    }//GEN-LAST:event_jMenuItemZoomInActionPerformed

    private void jMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewActionPerformed
        if ( ! current )
            if ( ! askToSave() )
                return;
        MapSetupDialog msd = new MapSetupDialog(this, true);
        msd.setVisible( true );
        MapPanel newMap = msd.getNewMap();
        if ( newMap == null )
            return;
        mapPanel1 = newMap;
        addMapEvents();
        jScrollPaneMap.setViewportView( mapPanel1 );

        filename = null;
        currentFileFormat = null;
        current = true;

        new_nodeId = 1;
        zoom = 1.0;
        last_x = 0.0; last_y = 0.0;
        currentNodeId = 0;
        
        Dimension mapSize = mapPanel1.getPreferredSize();
        this.setTitle( "ManetBuilder - Untitled1.top ("+mapSize.getWidth()+"x"+mapSize.getHeight()+")" );
        if ( newMap.getImageFilename() != null )
            jCheckBoxMenuItemBackground.enable();
        else
            jCheckBoxMenuItemBackground.disable();
    }//GEN-LAST:event_jMenuItemNewActionPerformed

    private void jMenuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveAsActionPerformed
        String filename_old = filename;
        filename = null;
        saveFile();
        if ( filename == null )
            filename = filename_old;
    }//GEN-LAST:event_jMenuItemSaveAsActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed
        saveFile();
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        // if a document is already opened and edited, offer to save it first.
        if ( current == false )
            if ( ! askToSave() )
                return;
            
        javax.swing.JFileChooser chooser;
        if ( props.getProperty( "manetbuilder.opendir" ) == null || ! new java.io.File( props.getProperty( "manetbuilder.opendir" ) ).exists() )
            chooser = new javax.swing.JFileChooser();
        else
            chooser = new javax.swing.JFileChooser( props.getProperty( "manetbuilder.opendir" ) );
        
        javax.swing.filechooser.FileFilter ff = chooser.getAcceptAllFileFilter();
        chooser.addChoosableFileFilter( ff );
        
        if ( ManetBuilderPluginFinder.fileformats == null ) {
            System.err.println("No file formats found!");
            return;
        }
        
        java.util.Iterator fileformatkeys = ManetBuilderPluginFinder.fileformats.keySet().iterator();
        while ( fileformatkeys.hasNext() ) {
            try {
                FileFormat fileformat = (FileFormat)((Class)ManetBuilderPluginFinder.fileformats.get( fileformatkeys.next() )).newInstance();
                if ( fileformat.isReadable() ) {
                    com.darwinsys.util.JFileFilter filter = new com.darwinsys.util.JFileFilter();;
                    filter.addType( fileformat.getFileExtention() );
                    filter.setDescription( fileformat.getFileTypeDescription() );
                    chooser.addChoosableFileFilter( filter );
                }
            } catch ( Exception e ) {
                System.err.println( e.toString() );
            }
        }
        
        chooser.setFileFilter( ff );
        
        int returnVal = chooser.showOpenDialog( null );       
        if ( returnVal != javax.swing.JFileChooser.APPROVE_OPTION )
            return;
        
        props.setProperty( "manetbuilder.opendir", chooser.getSelectedFile().getAbsolutePath() );
        filename = chooser.getSelectedFile().getName();
        this.setTitle( "ManetBuilder - "+ filename );
        props.setProperty( "manetbuilder.lastfile", chooser.getSelectedFile().getAbsolutePath() );

        MapPanel mp = null;
        
        String filedesc = chooser.getFileFilter().getDescription();
        // if the user used the Accept All file filter, we'll have to search by file extention
        fileformatkeys = ManetBuilderPluginFinder.fileformats.keySet().iterator();
        while ( fileformatkeys.hasNext() ) {
            try {
            FileFormat fileformat = (FileFormat)((Class)ManetBuilderPluginFinder.fileformats.get( fileformatkeys.next() )).newInstance();
            if ( fileformat.isReadable() ) {
                if ( chooser.getFileFilter() == ff ) {
                    if ( filename.endsWith( fileformat.getFileExtention() ) ) {
                        mp = fileformat.readFile( chooser.getSelectedFile() );
                        break;
                    }
                } else if ( filedesc == fileformat.getFileTypeDescription() ) {
                    mp = fileformat.readFile( chooser.getSelectedFile() );
                    break;
                }
            }
            } catch ( Exception e ) {
                System.err.println( e.toString() );
            }
        }
        
        if ( mp != null ) {
            mapPanel1 = mp;
            jScrollPaneMap.setViewportView( mapPanel1 );
            addMapEvents();
            new_nodeId = mapPanel1.countNodes() + 1;
            jCheckBoxMenuItemBackground.setEnabled( mp.getImageFilename() != null );
        }
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        if ( ! current )
            askToSave();
        
        try {
            java.io.File propfile = new java.io.File( System.getProperty("user.home")+"/.manetbuilder/manetbuilder.properties" );
            props.store( new java.io.FileOutputStream( propfile ), "Settings for manetbuilder (wireless node layout manager)" );
        } catch ( java.io.IOException e ) {
            e.printStackTrace();
            System.exit( -1 );
        }      
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        if ( ! current )
            askToSave();
        
        try {
            java.io.File propfile = new java.io.File( System.getProperty("user.home")+"/.manetbuilder/manetbuilder.properties" );
            props.store( new java.io.FileOutputStream( propfile ), "Settings for manetbuilder (wireless node layout manager)" );
        } catch ( java.io.IOException e ) {
            e.printStackTrace();
            System.exit( -1 );
        }      
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        props = new java.util.Properties();
        try {
            java.io.File propfiledir = new java.io.File( System.getProperty("user.home")+"/.manetbuilder" );
            if ( ! propfiledir.exists() )
                propfiledir.mkdir();
            java.io.File propfile = new java.io.File( System.getProperty("user.home")+"/.manetbuilder/manetbuilder.properties" );
            if ( ! propfile.exists() )
                propfile.createNewFile();
            props.load( new java.io.FileInputStream( propfile ) );
        } catch ( java.io.IOException e ) {
            e.printStackTrace();
            System.exit( -1 );
        }
        new ManetBuilder().show();
    }
    
    public void redrawMap() {
        if ( mapPanel1 == null )
            return;
        mapPanel1.setDisplayRanges( ((Boolean)jTableOptions.getValueAt( RANGES_ROW, 1 )).booleanValue() ); 
        mapPanel1.setDisplayLinks( ((Boolean)jTableOptions.getValueAt( LINKS_ROW, 1 )).booleanValue() );
        mapPanel1.setDisplayCoords( ((Boolean)jTableOptions.getValueAt( COORDS_ROW, 1 )).booleanValue() );
        mapPanel1.setDisplayLinkLengths( ((Boolean)jTableOptions.getValueAt( LENGTHS_ROW, 1 )).booleanValue() );
        mapPanel1.setDisplayGrid( ((Boolean)jTableOptions.getValueAt( GRID_ROW, 1 )).booleanValue() );
        mapPanel1.setDisplayBackground( ((Boolean)jTableOptions.getValueAt( BACKGROUND_ROW, 1 )).booleanValue() );
        mapPanel1.setZoom( zoom );
        mapPanel1.repaint();
    }
            
    public void saveFile() {
        java.io.File myfile;
        if ( filename == null ) {
            javax.swing.JFileChooser chooser;
            if ( props.getProperty( "manetbuilder.opendir" ) == null || ! new java.io.File( props.getProperty( "manetbuilder.opendir" ) ).exists() )
                chooser = new javax.swing.JFileChooser();
            else
                chooser = new javax.swing.JFileChooser( props.getProperty( "manetbuilder.opendir" ) );

            if ( ManetBuilderPluginFinder.fileformats == null ) {
                System.err.println("No file formats found!");
                return;
            }

            java.util.Iterator fileformatkeys = ManetBuilderPluginFinder.fileformats.keySet().iterator();
            while ( fileformatkeys.hasNext() ) {
                try {
                FileFormat fileformat = (FileFormat)((Class)ManetBuilderPluginFinder.fileformats.get( fileformatkeys.next() )).newInstance();
                com.darwinsys.util.JFileFilter filter = new com.darwinsys.util.JFileFilter();;
                filter.addType( fileformat.getFileExtention() );
                filter.setDescription( fileformat.getFileTypeDescription() );
                chooser.addChoosableFileFilter( filter );
                if ( fileformat.getFileTypeDescription().startsWith( "ManetBuilder" ) )
                    chooser.setFileFilter( filter );
                } catch ( Exception e ) {
                    System.err.println( e.toString() );
                }
            }

            int returnVal = chooser.showSaveDialog( null );
            if ( returnVal == javax.swing.JFileChooser.APPROVE_OPTION ) {
                if ( chooser.getSelectedFile().exists() )
                    if ( javax.swing.JOptionPane.showConfirmDialog( this, "Overwrite existing file?", "Overwrite", javax.swing.JOptionPane.YES_NO_OPTION ) == javax.swing.JOptionPane.NO_OPTION )
                        return;
                filename = chooser.getSelectedFile().getAbsolutePath();
                myfile = chooser.getSelectedFile();
            } else {
                return;
            }

            String filedesc = chooser.getFileFilter().getDescription();
            // if the user used the Accept All file filter, we'll have to search by file extention
            fileformatkeys = ManetBuilderPluginFinder.fileformats.keySet().iterator();
            while ( fileformatkeys.hasNext() ) {
                try {
                    FileFormat fileformat = (FileFormat)((Class)ManetBuilderPluginFinder.fileformats.get( fileformatkeys.next() )).newInstance();
                    if ( filedesc == fileformat.getFileTypeDescription() ) {
                        currentFileFormat = fileformat;
                        break;
                    }
                } catch ( Exception e ) {
                    System.err.println( e.toString() );
                }
            }
            this.setTitle( "ManetBuilder - "+filename );
        } else {
            myfile = new java.io.File( filename );
        }
        
        currentFileFormat.saveFile( myfile, mapPanel1 );
        current = true;
    }
    
    public boolean askToSave() {
        int response = javax.swing.JOptionPane.showConfirmDialog( this, "Would you like to save the current map?", "Save Map", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION );
        if ( response == javax.swing.JOptionPane.YES_OPTION ) {
            saveFile();
        } else if ( response == javax.swing.JOptionPane.CANCEL_OPTION ) {
            return ( false );
        }
        return ( true );
    }
    
    void addMapEvents() {
        if ( mapPanel1 == null )
            return;
        mapPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mapPanel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mapPanel1MouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapPanel1MouseClicked(evt);
            }
        });
        mapPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mapPanel1MouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mapPanel1MouseDragged(evt);
            }
        });       
    }
    
    Point2D.Double snapToGrid( double x, double y, double zoom ) {
        Dimension mapSize = mapPanel1.getMapSize();
        double min = mapSize.getWidth();
        double spacer;
        if ( min > mapSize.getHeight() )
            min = mapSize.getHeight();
        if ( min < 1e4 )
            spacer = 1e1;
        else if ( min < 1e5 )
            spacer = 1e2;
        else if ( min < 1e6 )
            spacer = 1e3;
        else
            spacer = 1e2;        
        //spacer /= zoom;
        
        x = Math.round( Math.round( x*zoom / spacer ) ) * spacer;
        y = Math.round( Math.round( y*zoom / spacer ) ) * spacer;
        return ( new Point2D.Double( x, y ) );
    }
           
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupMode;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemAllRanges;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemBackground;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemCoords;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemGrid;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemLengths;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemLinks;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemSnap;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemAnimate;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemCopy;
    private javax.swing.JMenuItem jMenuItemCut;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemJoke;
    private javax.swing.JMenuItem jMenuItemNew;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemPaste;
    private javax.swing.JMenuItem jMenuItemPrint;
    private javax.swing.JMenuItem jMenuItemProperties;
    private javax.swing.JMenuItem jMenuItemRedo;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuItemSaveAs;
    private javax.swing.JMenuItem jMenuItemSaveCopy;
    private javax.swing.JMenuItem jMenuItemUndo;
    private javax.swing.JMenuItem jMenuItemZoom1;
    private javax.swing.JMenuItem jMenuItemZoomIn;
    private javax.swing.JMenuItem jMenuItemZoomOut;
    private javax.swing.JMenu jMenuMode;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelOptions;
    private javax.swing.JPanel jPanelProps;
    private javax.swing.JPanel jPanelSidePanel;
    private javax.swing.JPanel jPanelTime;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemApplicationMode;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemLayoutMode;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemMobilityMode;
    private javax.swing.JScrollPane jScrollPaneMap;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSlider jSliderTime;
    private javax.swing.JSplitPane jSplitPaneMain;
    private javax.swing.JTable jTableOptions;
    private javax.swing.JTable jTableProps;
    // End of variables declaration//GEN-END:variables
    
}
