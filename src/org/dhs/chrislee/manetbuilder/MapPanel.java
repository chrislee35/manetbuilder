/*
 * MapPanel.java
 *
 * Created on August 16, 2004, 7:05 PM
 */
package org.dhs.chrislee.manetbuilder;

import java.awt.*;
import java.awt.geom.*;
import java.awt.print.*;
import java.awt.image.*;
import javax.swing.*;
/**
 *
 * @author  chris
 */
public class MapPanel extends javax.swing.JPanel implements java.awt.print.Printable, java.io.Serializable {
    Map map = null;
    transient Graphics2D g; // don't serialize
    double zoom = 1.0;
    boolean links = true;
    boolean ranges = true;
    boolean grid = true;
    boolean coords = true;
    boolean linklengths = true;
    boolean background = true;
    double time = 0.0;
    double mousex, mousey;

    public static final int MODE_LAYOUT = 0;
    public static final int MODE_MOBILITY = 1;
    public static final int MODE_APPLICATION = 2;

    int mode = MODE_LAYOUT;
 
    /** Creates new form MapPanel */
    public MapPanel() {
        this( 1000.0, 1000.0, 600.0 );
    }
    
    public MapPanel( double height, double width, double simtime ) {
        this( height, width, simtime, (Image)null, (String)null );
    }

    public MapPanel( double height, double width, double simtime, Image background, String imageFilename ) {
        initComponents();
        map = new Map( height, width, simtime, background, imageFilename );
        this.setBackground( Color.white );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        setLayout(new java.awt.BorderLayout());

    }//GEN-END:initComponents

    public void paintComponent(java.awt.Graphics graphics) {
        g = (Graphics2D) graphics;
        super.paintComponent(g);
        redrawMap();
    }
    
    protected void clear(java.awt.Graphics g) {
        super.paintComponent( g );
    }
    
 // ---------------------- BEGIN ACCESSORS ----------------------- //

    public java.awt.Dimension getPreferredSize() {
        return map.getPreferredSize();
    }
    
    public java.awt.Dimension getMapSize() {
        return map.getMapSize();
    }
    
    public double getZoom() {
        return ( zoom );
    }
    
    public void setZoom( double new_zoom ) {
        zoom = new_zoom;
        repaint();
    }
    
    public void addNode( Node node ) {
        map.addNode( node );
        repaint();
    }
    
    public void addTimedPoint( double x, double y, double time ) {
        map.addTimedPoint( x, y, time );
        repaint();
    }
    
    public void setNodes( Node[] newnodes ) {
        map.setNodes( newnodes );
        repaint();
    }
    
    public Node getNode( int nodeId ) {
        return ( map.getNode( nodeId ) );
    }
    
    public java.util.ArrayList getNodes() {
        return ( map.getNodes() );
    }
    
    public boolean getDisplayLinks() {
        return ( links );
    }
    
    public void setDisplayLinks( boolean display_links ) {
        links = display_links;
    }
    
    public boolean getDisplayRanges() {
        return ( ranges );
    }

    public void setDisplayRanges( boolean display_ranges ) {
        ranges = display_ranges;
    }
    
    public boolean getDisplayGrid() {
        return ( grid );
    }
    public void setDisplayGrid( boolean display_grid ) {
        grid = display_grid;
    }
    
    public boolean getDisplayCoords() {
        return ( coords );
    }
    
    public void setDisplayCoords( boolean display_coords ) {
        coords = display_coords;
    }
    
    public boolean getDisplayLinkLengths() {
        return ( linklengths );
    }
    
    public void setDisplayLinkLengths( boolean display_length ) {
        linklengths = display_length;
    }
    
    public int getMode( ) {
        return ( mode );
    }
    
    public void setMode( int mode ) {
        this.mode = mode;
        repaint();
    }

    public double getSimtime() {
        return ( map.getSimtime() );
    }
    
    public void setSimtime( double simtime ) {
        map.setSimtime( simtime );
    }
    
    public double getTime() {
        return ( time );
    }
    
    public void setTime( double time ) {
        if ( time >= 0 && time <= getSimtime() )
            this.time = time;
    }
        
    public String getImageFilename() {
        return ( map.getImageFilename() );
    }
    
    public Image getBackgroundImage() {
        return ( map.getBackgroundImage() );
    }
    
    public boolean getDisplayBackground() {
        return ( background );
    }
    
    public void setDisplayBackground( boolean background ) {
        this.background = background;
    }
    
// ---------------------- END ACCESSORS ----------------------- //
    public void reset() {
        map.reset();
        repaint();
    }

    public void redrawMap() {
        Dimension mapSize = map.getMapSize();
        java.util.ArrayList nodes = getNodes();
        int currentlySelectedNode = map.getSelectedId();
        if ( nodes == null )
            return;
        if ( background && getBackgroundImage() != null )
            g.drawImage( getBackgroundImage(), 0, 0, (int)mapSize.getWidth(), (int)mapSize.getHeight(), this );
        if ( grid )
            MapPainter.drawGrid( g, mapSize, zoom );
        g.setFont( new java.awt.Font( "Helvetica", Font.PLAIN, 10 ) );
        for ( int i = 0; i < nodes.size(); i++ ) {
            Node node = (Node)nodes.get(i);
            if ( node == null ) continue;
            boolean selected = ( currentlySelectedNode == node.nodeId );
            if ( links )
                MapPainter.drawLink( g, node, zoom, time, nodes, linklengths, false );
            if ( ranges )
                MapPainter.drawRange( g, node, zoom, time, selected );
            MapPainter.drawNode( g, node, zoom, time, selected, coords );
            if ( mode == MODE_MOBILITY )
                MapPainter.drawMobility( g, node, zoom, selected, time );
            if ( mode == MODE_APPLICATION )
                MapPainter.drawApplication( g, node, nodes, zoom, selected, time );
        }
        MapPainter.drawMapProperties( g, zoom, time, mousex, mousey );
    }
        
    public boolean isPointNearNode( double x, double y, double time ) {
        return ( map.isPointNearNode( x, y, time ) );
    }
    
    public Node getNodeNearestPoint( double x, double y, double time ) {
        return ( map.getNodeNearestPoint( x, y, time ) );
    }
    
    public void selectNode( int nodeId ) {
        map.selectNode( nodeId );
        repaint();
    }
    
    public void setBackgroundImage( java.awt.Image background ) {
        map.setBackgroundImage( background );
    }

    public int countNodes() {
        return ( map.countNodes() );
    }
    
    public int print(java.awt.Graphics graphics, java.awt.print.PageFormat pageFormat, int param) throws java.awt.print.PrinterException {
        if (param >= 1)
            return Printable.NO_SUCH_PAGE;

        Graphics2D g2 = (Graphics2D) graphics;
        g2.translate( pageFormat.getImageableX(), pageFormat.getImageableY() );
        paint(g2);
        return Printable.PAGE_EXISTS;
    }
    
    public void print() {
        PrinterJob printJob = PrinterJob.getPrinterJob();
        printJob.setPrintable( this );
        if(printJob.printDialog()){
            try { 
                printJob.print(); 
            } catch (Exception PrinterExeption) {
            }
        }
    }
    
    public void deleteNode( int nodeId ) {
        map.deleteNode( nodeId );
        repaint();
    }
    
    public void setMouseLocation( double x, double y ) {
        mousex = x; mousey = y;
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
